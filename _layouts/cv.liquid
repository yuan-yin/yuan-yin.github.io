---
layout: default
---

<div class="post">
  <header class="post-header">
    <h1 class="post-title">
      {{ page.title }}
        <button id="lang-en" class="lang-button">English</button>
        <button id="lang-fr" class="lang-button">Fran√ßais</button>
    </h1>

    <h2 class="float-right">
        <a
          href="{{ page.cv_pdf_en | prepend: 'assets/pdf/' | relative_url }}"
          ><i class="fa-solid fa-file-pdf"></i>EN
        </a> | 
        <a
          href="{{ page.cv_pdf_fr | prepend: 'assets/pdf/' | relative_url }}"
          ><i class="fa-solid fa-file-pdf"></i>FR
        </a>
    </h2>
    {% if page.description %}
      <p class="post-description">{{ page.description }}</p>
    {% endif %}
  </header>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.5.136/pdf.mjs" type="module"></script>

  <script type="module">
    // Shortcut to access PDF.js exports
    const { pdfjsLib } = globalThis;

    // Set worker source for PDF.js
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.5.136/pdf.worker.mjs';

    const postElement = document.querySelector('.post');
    const canvas = document.getElementById('the-canvas');
    const ctx = canvas.getContext('2d');
    let pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null;

    // Store the URLs for the PDFs in different languages
    const urls = {
        en: "{{ page.cv_pdf_en | prepend: 'assets/pdf/' | relative_url }}",
        fr: "{{ page.cv_pdf_fr | prepend: 'assets/pdf/' | relative_url }}"
    };

    /**
     * Loads the selected PDF document and updates the active button style.
     * @param {string} lang Language code ('en' or 'fr').
     */
    function loadPdf(lang) {
        const url = urls[lang];
        pdfjsLib.getDocument(url).promise.then(pdfDoc_ => {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;
            pageNum = 1; // Reset to the first page
            renderPage(pageNum);
            updateActiveLangButton(lang);
        });
    }

    /**
     * Updates the active state of the language buttons.
     * @param {string} activeLang The language code of the active button.
     */
    function updateActiveLangButton(activeLang) {
        document.querySelectorAll('.lang-button').forEach(button => {
            button.classList.toggle('active', button.id === `lang-${activeLang}`);
        });
    }

    /**
     * Renders the specified page.
     * @param {number} num Page number.
     */
    function renderPage(num) {
        pageRendering = true;
        pdfDoc.getPage(num).then(page => {
            const viewport = page.getViewport({ scale: getScaleFactor(page) });
            adjustCanvasSize(viewport);

            const renderContext = {
                canvasContext: ctx,
                transform: getTransform(viewport),
                viewport
            };

            page.render(renderContext).promise.then(() => {
                pageRendering = false;
                if (pageNumPending !== null) {
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
            });

            addAnnotationsToPage(page, viewport);
            updatePageCounter(num);
        });
    }

    /**
     * Returns the appropriate scale factor based on the page and container width.
     * @param {object} page PDF page object.
     * @returns {number} Scale factor.
     */
    function getScaleFactor(page) {
        const desiredWidth = postElement.getBoundingClientRect().width;
        const origViewport = page.getViewport({ scale: 1 });
        return desiredWidth / origViewport.width;
    }

    /**
     * Adjusts the canvas size to match the viewport.
     * @param {object} viewport Viewport object.
     */
    function adjustCanvasSize(viewport) {
        const outputScale = window.devicePixelRatio * 2.0 || 1;
        canvas.width = Math.floor(viewport.width * outputScale);
        canvas.height = Math.floor(viewport.height * outputScale);
        canvas.style.width = `${Math.floor(viewport.width)}px`;
        canvas.style.height = `${Math.floor(viewport.height)}px`;
    }

    /**
     * Gets the transformation array for HiDPI screens.
     * @param {object} viewport Viewport object.
     * @returns {Array|null} Transformation array or null.
     */
    function getTransform(viewport) {
        const outputScale = window.devicePixelRatio * 2.0 || 1;
        return outputScale !== 1 ? [outputScale, 0, 0, outputScale, 0, 0] : null;
    }

    /**
     * Adds clickable annotations to the page, such as links.
     * @param {object} page PDF page object.
     * @param {object} viewport Viewport object.
     */
    function addAnnotationsToPage(page, viewport) {
        page.getAnnotations().then(annotations => {
            document.querySelectorAll('.pdf-link').forEach(link => link.remove());

            annotations.forEach(annotation => {
                if (annotation.subtype === 'Link' && annotation.url) {
                    createLinkElement(annotation, viewport);
                }
            });
        });
    }

    /**
     * Creates a link element for a given annotation.
     * @param {object} annotation Annotation object.
     * @param {object} viewport Viewport object.
     */
    function createLinkElement(annotation, viewport) {
        const [x1, y1, x2, y2] = annotation.rect;
        const linkElement = document.createElement('a');
        linkElement.href = annotation.url;
        linkElement.target = '_blank';
        linkElement.className = 'pdf-link';

        const left = x1 * viewport.transform[0] + viewport.transform[4];
        const top = canvas.height - y2 * viewport.transform[3] - viewport.transform[5];
        const width = (x2 - x1) * viewport.transform[0];
        const height = (y2 - y1) * viewport.transform[3];

        Object.assign(linkElement.style, {
            left: `${left}px`,
            top: `${top}px`,
            width: `${width}px`,
            height: `${height}px`,
            position: 'absolute',
        });

        postElement.appendChild(linkElement);
    }

    /**
     * Updates the displayed page number.
     * @param {number} num Page number.
     */
    function updatePageCounter(num) {
        document.getElementById('page_num').textContent = num;
    }

    /**
     * Queues a page for rendering.
     * @param {number} num Page number.
     */
    function queueRenderPage(num) {
        if (pageRendering) {
            pageNumPending = num;
        } else {
            renderPage(num);
        }
    }

    /**
     * Displays the previous page.
     */
    function onPrevPage() {
        if (pageNum <= 1) return;
        pageNum--;
        queueRenderPage(pageNum);
    }

    /**
     * Displays the next page.
     */
    function onNextPage() {
        if (pageNum >= pdfDoc.numPages) return;
        pageNum++;
        queueRenderPage(pageNum);
    }

    // Set up event listeners for navigation buttons
    document.getElementById('prev').addEventListener('click', onPrevPage);
    document.getElementById('next').addEventListener('click', onNextPage);

    // Set up event listeners for language selection
    document.getElementById('lang-en').addEventListener('click', () => loadPdf('en'));
    document.getElementById('lang-fr').addEventListener('click', () => loadPdf('fr'));

    // Load the English PDF by default on page load
    loadPdf('en');
  </script>



  <div>
      <button id="prev">&lt; Previous</button>
      <button id="next">Next &gt;</button>
      &nbsp; &nbsp;
      <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
  </div>

  <canvas id="the-canvas"></canvas>

  <style>
      .lang-button {
          padding: 5px 10px;
          margin: 1px;
          border: 1px solid #ccc;
          background-color: #f0f0f0;
          cursor: pointer;
          border-radius: 10px;
      }

      .lang-button.active {
          background-color: #9678B6; /* Highlight color for active language */
          color: white;
      }

      .pdf-link {
          position: absolute;
          border: 1px solid rgba(0, 0, 0, 0);
          /* This is a transparent border to ensure accessibility */
      }
  </style>
</div>

