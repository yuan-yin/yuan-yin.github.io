---
layout: default
---

<div class="post">
  <header class="post-header">
    <h1 class="post-title">
      {{ page.title }}
      {% if page.cv_pdf %}
        <a
          href="{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url }}"
          target="_blank"
          rel="noopener noreferrer"
          class="float-right"
          ><i class="fa-solid fa-file-pdf"></i
        ></a>
      {% endif %}
    </h1>
    {% if page.description %}
      <p class="post-description">{{ page.description }}</p>
    {% endif %}
  </header>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.5.136/pdf.mjs" type="module"></script>

  <script type="module">
    // If absolute URL from the remote server is provided, configure the CORS
    // header on that server.
    var url = "{{ page.cv_pdf | prepend: 'assets/pdf/' | relative_url }}";

    // Loaded via <script> tag, create shortcut to access PDF.js exports.
    var { pdfjsLib } = globalThis;

    // The workerSrc property shall be specified.
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.5.136/pdf.worker.mjs';

    const postElement = document.querySelector('.post');
    const rect = postElement.getBoundingClientRect();
    const width = rect.width;

    var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null,
        desiredWidth = width,
        canvas = document.getElementById('the-canvas'),
        ctx = canvas.getContext('2d');

    /**
     * Get page info from document, resize canvas accordingly, and render page.
     * @param num Page number.
     */
    function renderPage(num) {
      pageRendering = true;
      // Using promise to fetch the page
      pdfDoc.getPage(num).then(function(page) {
        var viewport = page.getViewport({ scale: 1, });
        // Support HiDPI-screens.
        var outputScale = window.devicePixelRatio * 2.0 || 1;

        var origViewport = page.getViewport({ scale: 1, });
        var scale = desiredWidth / origViewport.width;
        var viewport = page.getViewport({ scale: scale, });

        var canvas = document.getElementById('the-canvas');
        var context = canvas.getContext('2d');

        canvas.width = Math.floor(viewport.width * outputScale);
        canvas.height = Math.floor(viewport.height * outputScale);
        canvas.style.width = Math.floor(viewport.width) + "px";
        canvas.style.height =  Math.floor(viewport.height) + "px";

        var transform = outputScale !== 1
          ? [outputScale, 0, 0, outputScale, 0, 0]
          : null;

        // Render PDF page into canvas context
        var renderContext = {
          canvasContext: ctx,
          transform: transform,
          viewport: viewport
        };
        var renderTask = page.render(renderContext);

        // Wait for rendering to finish
        renderTask.promise.then(function() {
          pageRendering = false;
          if (pageNumPending !== null) {
            // New page rendering is pending
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });

        page.getAnnotations().then(annotations => {
          // Clear previous links
          document.querySelectorAll('.pdf-link').forEach(link => link.remove());

          annotations.forEach(annotation => {
            if (annotation.subtype === 'Link' && annotation.url) {
              const linkElement = document.createElement('a');
              linkElement.href = annotation.url;
              linkElement.target = '_blank';
              linkElement.className = 'pdf-link';

              const [x1, y1, x2, y2] = annotation.rect;
              const left = x1 * viewport.transform[0] + viewport.transform[4];
              const top = canvas.height - y2 * viewport.transform[3] - viewport.transform[5];
              const width = (x2 - x1) * viewport.transform[0];
              const height = (y2 - y1) * viewport.transform[3];

              linkElement.style.left = `${left}px`;
              linkElement.style.top = `${top}px`;
              linkElement.style.width = `${width}px`;
              linkElement.style.height = `${height}px`;

              postElement.appendChild(linkElement);
            }
          });
        });
      });

      // Update page counters
      document.getElementById('page_num').textContent = num;
    }

    /**
     * If another page rendering in progress, waits until the rendering is
     * finised. Otherwise, executes rendering immediately.
     */
    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }

    /**
     * Displays previous page.
     */
    function onPrevPage() {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    document.getElementById('prev').addEventListener('click', onPrevPage);

    /**
     * Displays next page.
     */
    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
        pageNum++;
        queueRenderPage(pageNum);
      }
      document.getElementById('next').addEventListener('click', onNextPage);

      /**
       * Asynchronously downloads PDF.
       */
      pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
        pdfDoc = pdfDoc_;
        document.getElementById('page_count').textContent = pdfDoc.numPages;

        // Initial/first page rendering
        renderPage(pageNum);
      });
    </script>

    <div>
      <button id="prev">Previous</button>
      <button id="next">Next</button>
      &nbsp; &nbsp;
      <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    </div>

    <canvas id="the-canvas"></canvas>
  </div>

